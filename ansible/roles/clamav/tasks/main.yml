---
# ClamAV automation role: symlinks, permissions, cron jobs, JSON summary (systemd service omitted)
# Decisions:
# - Systemd monitoring service removed (cron covers scans). We record omission in JSON.
# - Absolute paths used for all symlink sources.
# - Idempotent: safely recreates/corrects symlinks and permissions.
# - JSON summary includes: symlinks, permissions, cron_jobs, services (with omission note).

- name: Determine if root escalation is required
  ansible.builtin.set_fact:
    escalate_root: "{{ (ansible_user_id | default(ansible_user) | lower) != 'root' }}"

- name: Force single sudo authentication early
  ansible.builtin.command: /bin/true
  when: escalate_root
  become: "{{ escalate_root }}"
  become_user: root

- name: Set dotfiles root absolute path
  ansible.builtin.set_fact:
    dotfiles_root: "{{ playbook_dir | regex_replace('/ansible$', '') }}"

- name: Define ClamAV script sources (absolute)
  ansible.builtin.set_fact:
    clamav_scripts:
      - { name: "clamscan", src: "{{ dotfiles_root }}/clamav/clamscan" }
      - {
          name: "clamav-light-scan",
          src: "{{ dotfiles_root }}/clamav/clamav-light-scan",
        }
      - {
          name: "clamav-full-scan",
          src: "{{ dotfiles_root }}/clamav/clamav-full-scan",
        }
      - {
          name: "clamscan_notify.sh",
          src: "{{ dotfiles_root }}/clamav/clamscan_notify.sh",
        }

- name: Define symlink targets (executables + cron only)
  ansible.builtin.set_fact:
    clamav_symlinks:
      # Executables in /usr/local/bin
      - {
          source: "{{ dotfiles_root }}/clamav/clamscan",
          dest: "/usr/local/bin/clamscan",
        }
      - {
          source: "{{ dotfiles_root }}/clamav/clamav-light-scan",
          dest: "/usr/local/bin/clamav-light-scan",
        }
      - {
          source: "{{ dotfiles_root }}/clamav/clamav-full-scan",
          dest: "/usr/local/bin/clamav-full-scan",
        }
      - {
          source: "{{ dotfiles_root }}/clamav/clamscan_notify.sh",
          dest: "/usr/local/bin/clamscan_notify.sh",
        }
      # Cron (daily light scan, weekly full scan)
      - {
          source: "{{ dotfiles_root }}/clamav/clamav-light-scan",
          dest: "/etc/cron.daily/clamav-light-scan",
        }
      - {
          source: "{{ dotfiles_root }}/clamav/clamav-full-scan",
          dest: "/etc/cron.weekly/clamav-full-scan",
        }

# Ensure parent directories exist
- name: Ensure parent directories for symlink destinations exist
  ansible.builtin.file:
    path: "{{ item.dest | dirname }}"
    state: directory
    mode: "0755"
  loop: "{{ clamav_symlinks }}"
  loop_control:
    label: "{{ item.dest }}"
  become: "{{ escalate_root }}"
  become_user: root

# Gather destination stats
- name: Stat current destination paths
  ansible.builtin.stat:
    path: "{{ item.dest }}"
    follow: false
  register: clamav_dest_stats
  loop: "{{ clamav_symlinks }}"
  loop_control:
    label: "{{ item.dest }}"

# Remove conflicts
- name: Remove conflicting non-matching destinations
  ansible.builtin.file:
    path: "{{ item.item.dest }}"
    state: absent
  loop: "{{ clamav_dest_stats.results }}"
  when: >
    item.stat.exists and (
      (not item.stat.islnk) or
      (item.stat.islnk and (item.stat.lnk_source | default('')) != item.item.source)
    )
  loop_control:
    label: "{{ item.item.dest }}"
  become: "{{ escalate_root }}"
  become_user: root

# Create / fix symlinks
- name: Create required ClamAV symlinks (absolute sources)
  ansible.builtin.file:
    src: "{{ item.source }}"
    path: "{{ item.dest }}"
    state: link
    force: true
    owner: root
    group: root
  loop: "{{ clamav_symlinks }}"
  loop_control:
    label: "{{ item.dest }}"
  become: "{{ escalate_root }}"
  become_user: root

# Ensure scripts executable
- name: Ensure source scripts/binaries are executable
  ansible.builtin.file:
    path: "{{ item.src }}"
    mode: "0755"
  loop: "{{ clamav_scripts }}"
  loop_control:
    label: "{{ item.name }}"
  become: "{{ escalate_root }}"
  become_user: root

# Re-stat symlinks
- name: Re-stat symlinks after creation
  ansible.builtin.stat:
    path: "{{ item.dest }}"
    follow: false
  register: clamav_dest_valid
  loop: "{{ clamav_symlinks }}"
  loop_control:
    label: "{{ item.dest }}"

# Stat scripts for permissions
- name: Stat source scripts for permissions
  ansible.builtin.stat:
    path: "{{ item.src }}"
    follow: false
  register: clamav_script_stats
  loop: "{{ clamav_scripts }}"
  loop_control:
    label: "{{ item.name }}"

# Build symlink results
- name: Assemble symlink result objects
  ansible.builtin.set_fact:
    clamav_symlink_results: "{{ clamav_symlink_results | default([]) + [ {
      'source': item.item.source,
      'destination': item.stat.path,
      'created': (item.stat.islnk | default(false)) and (item.stat.lnk_source == item.item.source),
      'error': ( (not (item.stat.islnk | default(false))) or (item.stat.lnk_source != item.item.source) ) | ternary('mismatch_or_missing','')
      } ] }}"
  loop: "{{ clamav_dest_valid.results }}"
  loop_control:
    label: "{{ item.item.dest }}"

# Build permission results
- name: Assemble permission result objects
  ansible.builtin.set_fact:
    clamav_permission_results: "{{ clamav_permission_results | default([]) + [ {
      'file': item.stat.path,
      'is_executable': (item.stat.mode is defined) and (item.stat.mode | regex_search('..7|..5|..3|..1')),
      'changed': false,
      'error': ((item.stat.mode | default('')) | length == 0) | ternary('no_mode','')
      } ] }}"
  loop: "{{ clamav_script_stats.results }}"
  loop_control:
    label: "{{ item.stat.path | default('unknown') }}"

# Extract cron job entries
- name: Build cron job result list
  ansible.builtin.set_fact:
    clamav_cron_jobs: "{{ clamav_cron_jobs | default([]) + [ { 'file': item.destination, 'registered': item.created, 'error': item.error } ] }}"
  loop: "{{ clamav_symlink_results }}"
  when: item.destination is search('^/etc/cron.daily/|^/etc/cron.weekly/')
  loop_control:
    label: "{{ item.destination }}"

# Record service omission
- name: Set service results (service omitted)
  ansible.builtin.set_fact:
    clamav_service_results:
      - service_file: "/etc/systemd/system/clamav_monitor.service"
        enabled: false
        started: false
        error: "omitted"

# Final JSON aggregation
- name: Aggregate ClamAV automation JSON
  ansible.builtin.set_fact:
    clamav_automation_summary:
      symlinks: "{{ clamav_symlink_results }}"
      permissions: "{{ clamav_permission_results }}"
      cron_jobs: "{{ clamav_cron_jobs | default([]) }}"
      services: "{{ clamav_service_results }}"

- name: Output ClamAV automation JSON summary
  ansible.builtin.debug:
    msg: "{{ clamav_automation_summary | to_nice_json }}"
# Notes:
# - Systemd service intentionally omitted; cron handles scanning schedule.
# - To reintroduce service later, add its symlink and validation tasks back.
